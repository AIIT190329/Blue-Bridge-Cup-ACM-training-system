/*有一头母牛，它每年年初生一头小母牛。
每头小母牛从第四个年头开始，每年年初也生一头小母牛。
请编程实现在第n年的时候，共有多少头母牛？*/

/*输入数据由多个测试实例组成，每个测试实例占一行，
包括一个整数n(0<n<55)，n的含义如题目中描述。
n=0表示输入数据的结束，不做处理。*/

/*对于每个测试实例，输出在第n年的时候母牛的数量。
每个输出占一行。*/

/*解题思路 :
审清题干，养成习惯。

有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。是不是有点似曾相识？没错，这道题和斐波那契数列很相似，只不过递增的规律稍微变了一些。
一个输入，一个输出，多组测试用例，输入0结束，这是首先要明确的，所以要用到循环，并且输入0时结束循环。

我们先来分析一下这道题的规律吧。

这里简单地列一个表格：

年份	1	2	3	4	5	6	7	8	9
母牛数量	1	2	3	4	6	9	13	19	28
有没有看出一些端倪？没错，fn = fn - 1 + fn - 3(n > 3)。记不记得斐波那契数列的公式？fn = fn - 1 + fn - 2(n > 2)。说到这里，想必大家都会做了吧？

注意，这里题目明确要用递归的方法，所以大家尽量还是用递归来做，虽说用数组的方法也能提交。。。

既然是递归，那就离不开三点：找重复、找变化、找边界。

（1）找重复：就是递归时重复操作的部分，详见上面的公式；

（2）找变化：就是递归时参数的变化，上面的公式一起囊括了；

（3）找边界：就是递归脱出的条件，这里很明显是n <= 3，因为此时上面的公式不适用了。

写成分段函数的形式就是：

         n, n <= 3

f(n) =  (没法打大括号，各位将就看)

         f(n - 1) + f(n - 3), n > 3

注意事项：

（1）注意测试用例是多组，要想办法循环输入并输出；

（2）注意程序运行结束的条件是输入0时结束；

（3）注意递归方法的脱出条件是n <= 3；

参考代码 :*/
#define _CRT_SECURE_NO_WARNINGS
# include<stdio.h>
int fun(int n)
{
    if (n <= 3) return n;
    else return fun(n - 1) + fun(n - 3);
}
int main()
{
    int n;
    while (scanf("%d", &n) && n)
    printf("%d\n", fun(n));
    return 0;
}



/*我们先列出一个表格，把每一年对应的母牛数量写出来。



第 n年：	1	2	3	4	5	6	7	8
f[n] 头牛:	1
2	3	4	6	9
13	19


先看第 4 年，对应有 4 头母牛，4 = 3 + 1；
再看第 5 年，对应有 6 头母牛，6 = 4 + 2；
最后看第 6 年，对应有 9 头母牛，9 = 6 + 3；



没错，是有规律的，该年母牛的数量就是一年前的数量再加上三年前的数量，

用公式表示就是 f[n] = f[n - 1] + f[n - 3]



参考代码:



    迭代法：

        先给出用迭代法的代码，因为它长*/

#include<iostream>
using namespace std;
int main()
{
    int n, i;
    int f1, f2, f3, fn;
    while (cin >> n && n != 0)  //输入 n 的值，且 n 不等于0，则进入，否则退出
    {
        f1 = 1;
        f2 = 2;
        f3 = 3;
        if (n == 1)
            cout << f1 << endl;
        else if (n == 2)
            cout << f2 << endl;
        else if (n == 3)
            cout << f3 << endl;
        else
        {
            for (i = 4; i <= n; i++)
            {
                fn = f3 + f1;
                //把该年迭代为一年前,一年前迭代为两年前，依次类推
                f1 = f2;  //f1代表 3 年前
                f2 = f3;  //f2代表 2 年前
                f3 = fn;  //f3代表 1 年前
            }
            cout << fn << endl;  //fn
        }
    }
    return 0;
}
/*    数组：

        最后给出用数组的，用数组相对来说会好一点，因为迭代一次，然后就可以输出了。
        上面那个代码每输入一个数都需要重新迭代，数量大且多的话，花费的时间会比较多。*/

#include<iostream>
using namespace std;
int main()
{
    int n, i;
    int f[55] = { 0,1,2,3 };  //f[0]=0,f[1]=1,f[2]=2,f[3]=3
    for (i = 4; i < 55; i++)
        f[i] = f[i - 1] + f[i - 3];
    while (cin >> n && n != 0)  //输入 n 的值，且 n 不等于0，则进入，否则退出
    {
        cout << f[n] << endl;
    }
    return 0;
}



Java

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Main main = new Main();
        while (true) {
            int n = scanner.nextInt();
            if (n == 0) {//当输入0时退出循环
                break;
            }
            main.nainiu(n);
        }
    }
    public void nainiu(int a) {
        int[] i = new int[55];
        i[0] = 1;
        i[1] = 2;
        i[2] = 3;
        for (int j = 3; j < i.length; j++) {
            i[j] = i[j - 1] + i[j - 3];
        }
        System.out.println(i[a - 1]);
    }
}
