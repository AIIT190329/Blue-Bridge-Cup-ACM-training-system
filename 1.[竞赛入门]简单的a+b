//题目描述
//输入两个整数a和b，计算a + b的和
//
//注意此题是多组测试数据
//
//输入
//输入两个整数A和B
//
//范围不超过2 ^ 10
//
//输出
//求A + B
//
//样例输入
//1 1
//10 20
//样例输出
//2
//30




//解题思路:
//
//这道题目的重点是scanf函数。
//
//函数名 : scanf
//功 能 : 执行格式化输入
//用 法 : int scanf(char* format[, argument, ...]);
//
//scanf()函数是通用终端格式化输入函数，它从标准输入设备(键盘) 读取输入的信息。可以读入任何固有类型的数据并自动把数值变换成适当的机内格式。
//
//其调用格式为 : scanf("<格式化字符串>"，<地址表>);
//
//【注意】scanf函数的返回值是重点，必须理解。
//
//scanf()函数返回值分为3种：
//
//(1)返回正整数。表示正确输入参数的个数。
//
//(2)返回整数0。表示用户的输入不匹配，无法正确输入任何值。
//
//(3)返回 - 1。表示输入流已经结束。在Windows下，用户按下CTRL + Z（会看到一个 ^ Z字符）再按下回车（可能需要重复多次），就表示输入结束；Linux / Unix下使用CTRL + D表示输入结束。
//
//printf函数介绍就忽略了，不是本题目的重点。
//参考代码 :
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
    int a = 0, b = 0;
    while (~scanf("%d%d", &a, &b))   //下面有关于~的解析
    {
        printf("%d\n", a + b);
    }
    return 0;
}
//上述程序正常输入时，没有任何问题，比如：
//
//输入 1 2  打印3
//
//输入10 20 打印30
//
//
//
//有很多读者对 ~不能理解，我就重点介绍一下吧。
//
//（重点，重点，重点！！！！！！！！！！作笔记了！！！！）
//
//关于~的作用解析：
//
//1、在Windows下，用户按下CTRL + Z（会看到一个 ^ Z字符），会停止输入流，scanf会返回 - 1。
//
//2、 - 1的补码为11111111 11111111 11111111 11111111  一共4个字节。
//
//3、~是C语言中的按位取反，因此~（ - 1）结果为00000000 00000000 00000000 00000000刚好为整数0的补码。
//
//4、因此当输入Ctrl + Z时，scanf会返回 - 1，while(~- 1) == while (0)，0为假，退出while循环。

